const https = require('https');
const { execSync } = require('child_process');
const fs = require('fs');

console.log(`
üöÄ CONFIGURA√á√ÉO AUTOM√ÅTICA: Prisma + PostgreSQL

üìã O que ser√° configurado:
‚úÖ Prisma ORM
‚úÖ PostgreSQL via Vercel
‚úÖ Schema do banco
‚úÖ Migrations
‚úÖ Cliente Prisma

üéØ Iniciando configura√ß√£o...
`);

async function setupPrismaPostgres() {
  try {
    console.log('1Ô∏è‚É£ Navegando para o diret√≥rio do portal...');
    process.chdir('./portal-maginf');
    
    console.log('2Ô∏è‚É£ Instalando Prisma...');
    try {
      execSync('npm install prisma @prisma/client', { stdio: 'inherit' });
      console.log('‚úÖ Prisma instalado com sucesso!');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro na instala√ß√£o, continuando...');
    }
    
    console.log('3Ô∏è‚É£ Inicializando Prisma...');
    try {
      execSync('npx prisma init', { stdio: 'inherit' });
      console.log('‚úÖ Prisma inicializado!');
    } catch (error) {
      console.log('‚ö†Ô∏è Prisma j√° pode estar inicializado, continuando...');
    }
    
    console.log('4Ô∏è‚É£ Criando schema Prisma para MAGINF...');
    createPrismaSchema();
    
    console.log('5Ô∏è‚É£ Configurando vari√°veis de ambiente...');
    createEnvFile();
    
    console.log('6Ô∏è‚É£ Gerando cliente Prisma...');
    try {
      execSync('npx prisma generate', { stdio: 'inherit' });
      console.log('‚úÖ Cliente Prisma gerado!');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao gerar cliente, continuando...');
    }
    
    console.log(`
üéâ PRISMA CONFIGURADO COM SUCESSO!

üìã PR√ìXIMOS PASSOS:

1Ô∏è‚É£ CONFIGURAR BANCO NO VERCEL:
   üåê Acesse: https://vercel.com/dashboard/projects/maginf-portal
   üìä Storage ‚Üí Create Database ‚Üí Postgres
   üìù Nome: maginf-database
   üîó Conecte ao projeto maginf-portal

2Ô∏è‚É£ ATUALIZAR DATABASE_URL:
   üìã Copie a DATABASE_URL do Vercel
   ‚öôÔ∏è Cole no arquivo .env (j√° criado)
   üîÑ Atualize tamb√©m no Vercel (Environment Variables)

3Ô∏è‚É£ EXECUTAR MIGRATIONS:
   üíª Execute: npx prisma db push
   üìä Execute: npx prisma studio (para visualizar dados)

4Ô∏è‚É£ RESTAURAR DADOS:
   üîÑ Execute: node restore-data-prisma.js (ser√° criado)

‚úÖ ARQUIVOS CRIADOS:
   üìÑ prisma/schema.prisma (schema do banco)
   üìÑ .env (vari√°veis de ambiente)
   üìÑ lib/prisma.js (cliente Prisma)

üéØ VANTAGENS DO PRISMA:
   ‚úÖ Type-safe queries
   ‚úÖ Auto-complete no VS Code
   ‚úÖ Migrations autom√°ticas
   ‚úÖ Interface visual (Prisma Studio)
   ‚úÖ Melhor performance
`);
    
    createPrismaClient();
    createDataRestoreScript();
    
  } catch (error) {
    console.error('‚ùå Erro durante configura√ß√£o:', error.message);
  }
}

function createPrismaSchema() {
  const schema = `// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  tickets   Ticket[]
  
  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  tickets     Ticket[]
  contracts   Contract[]
  
  @@map("clients")
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("open")
  priority    String   @default("medium")
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  closedAt    DateTime?
  
  // Relacionamentos
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  assignedId  String?
  assigned    User?    @relation(fields: [assignedId], references: [id])
  
  @@map("tickets")
}

model Contract {
  id          String   @id @default(cuid())
  title       String
  description String?
  value       Float
  status      String   @default("active")
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  
  @@map("contracts")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  category    String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("services")
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("settings")
}`;

  fs.writeFileSync('prisma/schema.prisma', schema);
  console.log('‚úÖ Schema Prisma criado!');
}

function createEnvFile() {
  const envContent = `# Database
DATABASE_URL="postgresql://username:password@localhost:5432/maginf?schema=public"

# NextAuth
NEXTAUTH_URL="https://maginf-portal.vercel.app"
NEXTAUTH_SECRET="maginf-2024-super-secret-key"

# App
APP_NAME="MAGINF Portal"
APP_URL="https://maginf-portal.vercel.app"`;

  fs.writeFileSync('.env', envContent);
  console.log('‚úÖ Arquivo .env criado!');
}

function createPrismaClient() {
  const clientCode = `import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma =
  globalForPrisma.prisma ??
  new PrismaClient({
    log: ['query'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma`;

  if (!fs.existsSync('lib')) {
    fs.mkdirSync('lib');
  }
  
  fs.writeFileSync('lib/prisma.js', clientCode);
  console.log('‚úÖ Cliente Prisma criado em lib/prisma.js!');
}

function createDataRestoreScript() {
  const restoreScript = `const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function restoreData() {
  console.log('üîÑ Restaurando dados do MAGINF...');
  
  try {
    // Limpar dados existentes
    await prisma.ticket.deleteMany();
    await prisma.contract.deleteMany();
    await prisma.client.deleteMany();
    await prisma.user.deleteMany();
    await prisma.service.deleteMany();
    await prisma.settings.deleteMany();
    
    console.log('üóëÔ∏è Dados antigos removidos');
    
    // Criar usu√°rios
    const users = await prisma.user.createMany({
      data: [
        {
          email: 'admin@maginf.com.br',
          name: 'Administrador MAGINF',
          role: 'admin'
        },
        {
          email: 'tecnico@maginf.com.br',
          name: 'T√©cnico MAGINF',
          role: 'technician'
        }
      ]
    });
    
    console.log('üë• Usu√°rios criados:', users.count);
    
    // Criar clientes
    const clients = await prisma.client.createMany({
      data: [
        {
          name: 'Empresa ABC Ltda',
          email: 'contato@empresaabc.com.br',
          phone: '(11) 9999-1111',
          company: 'ABC Ltda',
          status: 'active'
        },
        {
          name: 'Jo√£o Silva',
          email: 'joao@exemplo.com.br',
          phone: '(11) 9999-2222',
          company: 'Silva & Associados',
          status: 'active'
        }
      ]
    });
    
    console.log('üè¢ Clientes criados:', clients.count);
    
    // Criar servi√ßos
    const services = await prisma.service.createMany({
      data: [
        {
          name: 'Suporte T√©cnico MSP',
          description: 'Suporte t√©cnico completo para infraestrutura de TI',
          price: 299.90,
          category: 'MSP',
          active: true
        },
        {
          name: 'Backup em Nuvem',
          description: 'Solu√ß√£o completa de backup automatizado',
          price: 199.90,
          category: 'Cloud',
          active: true
        },
        {
          name: 'Monitoramento 24/7',
          description: 'Monitoramento cont√≠nuo da infraestrutura',
          price: 399.90,
          category: 'Monitoring',
          active: true
        }
      ]
    });
    
    console.log('üõ†Ô∏è Servi√ßos criados:', services.count);
    
    // Criar configura√ß√µes
    const settings = await prisma.settings.createMany({
      data: [
        { key: 'company_name', value: 'MAGINF Tecnologia' },
        { key: 'company_email', value: 'contato@maginf.com.br' },
        { key: 'company_phone', value: '(11) 9999-9999' },
        { key: 'support_hours', value: '08:00-18:00' }
      ]
    });
    
    console.log('‚öôÔ∏è Configura√ß√µes criadas:', settings.count);
    
    console.log('‚úÖ Dados restaurados com sucesso!');
    console.log('üåê Acesse: https://maginf-portal.vercel.app');
    
  } catch (error) {
    console.error('‚ùå Erro ao restaurar dados:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreData();`;

  fs.writeFileSync('restore-data-prisma.js', restoreScript);
  console.log('‚úÖ Script de restaura√ß√£o criado!');
}

// Executar configura√ß√£o
setupPrismaPostgres();
