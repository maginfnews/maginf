const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üì¶ Gerando build est√°tico para deploy manual\n');

try {
  // 1. Backup do next.config.js original
  console.log('üíæ Fazendo backup do next.config.js...');
  if (fs.existsSync('next.config.js')) {
    fs.copyFileSync('next.config.js', 'next.config.js.backup');
  }

  // 2. Usar configura√ß√£o est√°tica
  console.log('‚öôÔ∏è  Usando configura√ß√£o est√°tica...');
  fs.copyFileSync('next.config.static.js', 'next.config.js');

  // 3. Configurar ambiente de produ√ß√£o
  console.log('üåç Configurando ambiente de produ√ß√£o...');
  if (fs.existsSync('.env.production')) {
    fs.copyFileSync('.env.production', '.env.local');
  }

  // 4. Build est√°tico
  console.log('üî® Executando build est√°tico...');
  execSync('npm run build', { stdio: 'inherit' });

  // 5. Restaurar configura√ß√£o original
  console.log('üîÑ Restaurando configura√ß√£o original...');
  if (fs.existsSync('next.config.js.backup')) {
    fs.copyFileSync('next.config.js.backup', 'next.config.js');
    fs.unlinkSync('next.config.js.backup');
  }

  // 6. Verificar build
  if (fs.existsSync('./out')) {
    const files = fs.readdirSync('./out');
    console.log(`\n‚úÖ BUILD EST√ÅTICO CRIADO!`);
    console.log('=' .repeat(50));
    console.log(`üìÅ Pasta: ./out/`);
    console.log(`üìÑ Arquivos: ${files.length}`);

    // Criar .htaccess
    const htaccessContent = `# Dashboard MAGINF - Configura√ß√£o Est√°tica
RewriteEngine On

# Redirecionar para index.html se arquivo n√£o existir
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /index.html [L]

# For√ßar HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Cache para assets est√°ticos
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
</IfModule>

# Compress√£o GZIP
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>
`;

    fs.writeFileSync('./out/.htaccess', htaccessContent);
    console.log('‚úÖ .htaccess criado');

    console.log('\nüöÄ DEPLOY MANUAL - PR√ìXIMOS PASSOS:');
    console.log('=' .repeat(50));
    console.log('1. üåê Acesse: https://hpanel.hostinger.com');
    console.log('2. üìÅ V√° em: Arquivos ‚Üí Gerenciador de Arquivos');
    console.log('3. üìÇ Navegue: /public_html/dash/');
    console.log('4. üì§ Upload: TODOS os arquivos da pasta out/');
    console.log('5. ‚úÖ Teste: https://dashboard.maginf.com.br');

    console.log('\n‚ö†Ô∏è  IMPORTANTE:');
    console.log('   - As APIs n√£o funcionar√£o no build est√°tico');
    console.log('   - Apenas dados de demonstra√ß√£o ser√£o exibidos');
    console.log('   - Para APIs funcionais, use servidor Node.js');

  } else {
    console.log('‚ùå Pasta out/ n√£o foi criada');
  }

} catch (error) {
  console.error('\n‚ùå ERRO:', error.message);
  
  // Restaurar configura√ß√£o em caso de erro
  if (fs.existsSync('next.config.js.backup')) {
    fs.copyFileSync('next.config.js.backup', 'next.config.js');
    fs.unlinkSync('next.config.js.backup');
  }
}
