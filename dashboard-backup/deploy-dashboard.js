const { execSync } = require('child_process');
const ftp = require('basic-ftp');
const path = require('path');
const fs = require('fs');

// Carregar configura√ß√£o do dashboard
let config;
try {
  config = require('./deploy-config-dashboard.js');
} catch (error) {
  console.log('‚ùå Arquivo deploy-config-dashboard.js n√£o encontrado!');
  console.log('üìã Configure suas credenciais FTP primeiro.');
  process.exit(1);
}

async function deployDashboard() {
  console.log('üöÄ Deploy Dashboard MAGINF ‚Üí dashboard.maginf.com.br\n');

  try {
    // 1. Verificar se credenciais foram configuradas
    if (config.ftp.user === 'SEU_USUARIO_FTP' || config.ftp.password === 'SUA_SENHA_FTP') {
      console.log('‚ùå Configure suas credenciais FTP primeiro!');
      console.log('üìù Edite o arquivo: deploy-config-dashboard.js');
      console.log('üîë Substitua SEU_USUARIO_FTP e SUA_SENHA_FTP pelas suas credenciais');
      process.exit(1);
    }

    // 2. Copiar .env de produ√ß√£o
    console.log('‚öôÔ∏è  Configurando ambiente de produ√ß√£o...');
    if (fs.existsSync('.env.production')) {
      fs.copyFileSync('.env.production', '.env.local');
      console.log('‚úÖ Vari√°veis de produ√ß√£o configuradas');
    }

    // 3. Instalar depend√™ncias se necess√°rio
    if (!fs.existsSync('node_modules')) {
      console.log('üì¶ Instalando depend√™ncias...');
      execSync('npm install', { stdio: 'inherit' });
    }

    // 4. Build Next.js
    console.log('üì¶ Criando build do dashboard...');
    execSync('npm run build', { stdio: 'inherit' });
    console.log('‚úÖ Build criado!\n');

    // 5. Verificar se build foi criado
    if (!fs.existsSync(config.localBuildPath)) {
      throw new Error('‚ùå Pasta build n√£o foi criada! Verifique erros no build.');
    }

    // 6. Conectar FTP
    console.log('üîó Conectando √† Hostinger...');
    console.log(`   Host: ${config.ftp.host}`);
    console.log(`   User: ${config.ftp.user}`);
    
    const client = new ftp.Client();
    client.ftp.verbose = false; // Reduzir logs
    
    await client.access(config.ftp);
    console.log('‚úÖ Conectado √† Hostinger!\n');

    // 7. Preparar pasta do subdom√≠nio
    console.log('üìÅ Preparando pasta dashboard/...');
    console.log(`   Caminho: ${config.remotePath}`);
    
    await client.ensureDir(config.remotePath);
    await client.cd(config.remotePath);
    console.log('‚úÖ Pasta preparada');

    // 8. Limpar pasta anterior
    if (config.clearRemoteDir) {
      console.log('üßπ Limpando vers√£o anterior...');
      try {
        const list = await client.list();
        let filesRemoved = 0;
        
        for (const item of list) {
          if (item.isFile) {
            await client.remove(item.name);
            filesRemoved++;
          } else if (item.isDirectory) {
            await client.removeDir(item.name);
            filesRemoved++;
          }
        }
        
        console.log(`‚úÖ ${filesRemoved} itens removidos`);
      } catch (error) {
        console.log('‚ö†Ô∏è  Pasta j√° estava vazia');
      }
    }

    // 9. Upload do dashboard
    console.log('üì§ Fazendo upload do dashboard...');
    console.log('   Isso pode levar alguns minutos...');
    
    await client.uploadFromDir(config.localBuildPath);
    console.log('‚úÖ Upload conclu√≠do!\n');

    // 10. Criar .htaccess para Next.js
    console.log('‚öôÔ∏è  Configurando .htaccess...');
    const htaccessContent = `# Dashboard MAGINF - Configura√ß√£o Next.js
RewriteEngine On

# Redirecionar para index.html se arquivo n√£o existir
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ /index.html [L]

# For√ßar HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Cache para assets est√°ticos
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
</IfModule>

# Compress√£o GZIP
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# Headers de seguran√ßa
<IfModule mod_headers.c>
    Header always set X-Content-Type-Options nosniff
    Header always set X-Frame-Options DENY
    Header always set X-XSS-Protection "1; mode=block"
</IfModule>
`;
    
    await client.uploadFrom(Buffer.from(htaccessContent), '.htaccess');
    console.log('‚úÖ .htaccess configurado!\n');

    // 11. Fechar conex√£o
    client.close();

    // 12. Sucesso!
    console.log('üéâ DASHBOARD PUBLICADO COM SUCESSO!');
    console.log('=' .repeat(50));
    console.log('üåê URL: https://dashboard.maginf.com.br');
    console.log('üìÅ Pasta: /public_html/dashboard/');
    console.log('‚è∞ Aguarde 5-10 minutos para propaga√ß√£o DNS');
    console.log('üîí SSL ser√° ativado automaticamente\n');

    console.log('üìä Informa√ß√µes do deploy:');
    console.log(`   üì¶ Projeto: ${config.projectName}`);
    console.log(`   üöÄ Deploy: ${new Date().toLocaleString()}`);
    console.log(`   üìÇ Build: ${config.localBuildPath}`);
    console.log(`   üåê Destino: ${config.remotePath}`);
    
    console.log('\nüîó Links √∫teis:');
    console.log('   Dashboard: https://dashboard.maginf.com.br');
    console.log('   Clientes:  https://dashboard.maginf.com.br/clientes');
    console.log('   Status:    https://dashboard.maginf.com.br/status');

    console.log('\n‚úÖ Deploy conclu√≠do com sucesso!');

  } catch (error) {
    console.error('\n‚ùå ERRO NO DEPLOY:');
    console.error('   ', error.message);
    
    console.log('\nüîß Poss√≠veis solu√ß√µes:');
    console.log('   1. Verificar se subdom√≠nio "dashboard" foi criado na Hostinger');
    console.log('   2. Verificar credenciais FTP no deploy-config-dashboard.js');
    console.log('   3. Verificar conex√£o com internet');
    console.log('   4. Verificar se pasta /public_html/dashboard/ existe');
    console.log('   5. Contactar suporte da Hostinger se necess√°rio');
    
    console.log('\nüìû Suporte Hostinger:');
    console.log('   Chat: https://hpanel.hostinger.com (canto inferior direito)');
    console.log('   Docs: https://support.hostinger.com');
    
    process.exit(1);
  }
}

// Executar deploy
deployDashboard();
